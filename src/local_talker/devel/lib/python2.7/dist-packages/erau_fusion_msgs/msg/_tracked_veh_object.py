# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from erau_fusion_msgs/tracked_veh_object.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import erau_fusion_msgs.msg

class tracked_veh_object(genpy.Message):
  _md5sum = "0eaf4f33ea0e60aee406a700d7cb793e"
  _type = "erau_fusion_msgs/tracked_veh_object"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """erau_fusion_msgs/veh_object object

uint8 id # unique identifier to this object; should remain constant for this object over time
uint16 object_age  # total time this vehicle has been tracked for (in seconds)

# Lane assignment
# 0 - Unknown
# 1 - Left
# 2 - Host/center
# 3 - Right
uint8 lane

# TODO add tracks

================================================================================
MSG: erau_fusion_msgs/veh_object

# Coordinate frames based on center of front fascia at ground level.
# +x is forward, +y is left, +z is up

# Position
float32 x
float32 y
# Position Variance
float32 dx_var
float32 dy_var

# Relative Velocity
float32 dx
float32 dy
# Velocity Variance
float32 vx_var
float32 vy_var

# Classification
# 0 for Unknown
# 1 for car
# 2 for truck
# 3 for pedestrian
uint8 classification

#Car Size
float32 sizeX
float32 sizeY

#Blinker info (from ObstacleData.msg)
# BLINKER_INFO_UNAVAILABLE = 0
# BLINKER_INFO_OFF = 1
# BLINKER_INFO_LEFT = 2
# BLINKER_INFO_RIGHT = 3
# BLINKER_INFO_BOTH = 4
uint8 blinker_info
"""
  __slots__ = ['object','id','object_age','lane']
  _slot_types = ['erau_fusion_msgs/veh_object','uint8','uint16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object,id,object_age,lane

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(tracked_veh_object, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.object is None:
        self.object = erau_fusion_msgs.msg.veh_object()
      if self.id is None:
        self.id = 0
      if self.object_age is None:
        self.object_age = 0
      if self.lane is None:
        self.lane = 0
    else:
      self.object = erau_fusion_msgs.msg.veh_object()
      self.id = 0
      self.object_age = 0
      self.lane = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8fB2f2BHB().pack(_x.object.x, _x.object.y, _x.object.dx_var, _x.object.dy_var, _x.object.dx, _x.object.dy, _x.object.vx_var, _x.object.vy_var, _x.object.classification, _x.object.sizeX, _x.object.sizeY, _x.object.blinker_info, _x.id, _x.object_age, _x.lane))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.object is None:
        self.object = erau_fusion_msgs.msg.veh_object()
      end = 0
      _x = self
      start = end
      end += 46
      (_x.object.x, _x.object.y, _x.object.dx_var, _x.object.dy_var, _x.object.dx, _x.object.dy, _x.object.vx_var, _x.object.vy_var, _x.object.classification, _x.object.sizeX, _x.object.sizeY, _x.object.blinker_info, _x.id, _x.object_age, _x.lane,) = _get_struct_8fB2f2BHB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8fB2f2BHB().pack(_x.object.x, _x.object.y, _x.object.dx_var, _x.object.dy_var, _x.object.dx, _x.object.dy, _x.object.vx_var, _x.object.vy_var, _x.object.classification, _x.object.sizeX, _x.object.sizeY, _x.object.blinker_info, _x.id, _x.object_age, _x.lane))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.object is None:
        self.object = erau_fusion_msgs.msg.veh_object()
      end = 0
      _x = self
      start = end
      end += 46
      (_x.object.x, _x.object.y, _x.object.dx_var, _x.object.dy_var, _x.object.dx, _x.object.dy, _x.object.vx_var, _x.object.vy_var, _x.object.classification, _x.object.sizeX, _x.object.sizeY, _x.object.blinker_info, _x.id, _x.object_age, _x.lane,) = _get_struct_8fB2f2BHB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8fB2f2BHB = None
def _get_struct_8fB2f2BHB():
    global _struct_8fB2f2BHB
    if _struct_8fB2f2BHB is None:
        _struct_8fB2f2BHB = struct.Struct("<8fB2f2BHB")
    return _struct_8fB2f2BHB
