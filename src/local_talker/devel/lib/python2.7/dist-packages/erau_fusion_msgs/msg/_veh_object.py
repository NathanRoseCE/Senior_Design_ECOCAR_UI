# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from erau_fusion_msgs/veh_object.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class veh_object(genpy.Message):
  _md5sum = "854e2d728659a600f851a5b56bc86a26"
  _type = "erau_fusion_msgs/veh_object"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# Coordinate frames based on center of front fascia at ground level.
# +x is forward, +y is left, +z is up

# Position
float32 x
float32 y
# Position Variance
float32 dx_var
float32 dy_var

# Relative Velocity
float32 dx
float32 dy
# Velocity Variance
float32 vx_var
float32 vy_var

# Classification
# 0 for Unknown
# 1 for car
# 2 for truck
# 3 for pedestrian
uint8 classification

#Car Size
float32 sizeX
float32 sizeY

#Blinker info (from ObstacleData.msg)
# BLINKER_INFO_UNAVAILABLE = 0
# BLINKER_INFO_OFF = 1
# BLINKER_INFO_LEFT = 2
# BLINKER_INFO_RIGHT = 3
# BLINKER_INFO_BOTH = 4
uint8 blinker_info
"""
  __slots__ = ['x','y','dx_var','dy_var','dx','dy','vx_var','vy_var','classification','sizeX','sizeY','blinker_info']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','uint8','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,dx_var,dy_var,dx,dy,vx_var,vy_var,classification,sizeX,sizeY,blinker_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(veh_object, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.dx_var is None:
        self.dx_var = 0.
      if self.dy_var is None:
        self.dy_var = 0.
      if self.dx is None:
        self.dx = 0.
      if self.dy is None:
        self.dy = 0.
      if self.vx_var is None:
        self.vx_var = 0.
      if self.vy_var is None:
        self.vy_var = 0.
      if self.classification is None:
        self.classification = 0
      if self.sizeX is None:
        self.sizeX = 0.
      if self.sizeY is None:
        self.sizeY = 0.
      if self.blinker_info is None:
        self.blinker_info = 0
    else:
      self.x = 0.
      self.y = 0.
      self.dx_var = 0.
      self.dy_var = 0.
      self.dx = 0.
      self.dy = 0.
      self.vx_var = 0.
      self.vy_var = 0.
      self.classification = 0
      self.sizeX = 0.
      self.sizeY = 0.
      self.blinker_info = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8fB2fB().pack(_x.x, _x.y, _x.dx_var, _x.dy_var, _x.dx, _x.dy, _x.vx_var, _x.vy_var, _x.classification, _x.sizeX, _x.sizeY, _x.blinker_info))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.x, _x.y, _x.dx_var, _x.dy_var, _x.dx, _x.dy, _x.vx_var, _x.vy_var, _x.classification, _x.sizeX, _x.sizeY, _x.blinker_info,) = _get_struct_8fB2fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8fB2fB().pack(_x.x, _x.y, _x.dx_var, _x.dy_var, _x.dx, _x.dy, _x.vx_var, _x.vy_var, _x.classification, _x.sizeX, _x.sizeY, _x.blinker_info))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.x, _x.y, _x.dx_var, _x.dy_var, _x.dx, _x.dy, _x.vx_var, _x.vy_var, _x.classification, _x.sizeX, _x.sizeY, _x.blinker_info,) = _get_struct_8fB2fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8fB2fB = None
def _get_struct_8fB2fB():
    global _struct_8fB2fB
    if _struct_8fB2fB is None:
        _struct_8fB2fB = struct.Struct("<8fB2fB")
    return _struct_8fB2fB
