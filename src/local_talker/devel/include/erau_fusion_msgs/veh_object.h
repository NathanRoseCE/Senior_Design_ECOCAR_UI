// Generated by gencpp from file erau_fusion_msgs/veh_object.msg
// DO NOT EDIT!


#ifndef ERAU_FUSION_MSGS_MESSAGE_VEH_OBJECT_H
#define ERAU_FUSION_MSGS_MESSAGE_VEH_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace erau_fusion_msgs
{
template <class ContainerAllocator>
struct veh_object_
{
  typedef veh_object_<ContainerAllocator> Type;

  veh_object_()
    : x(0.0)
    , y(0.0)
    , dx_var(0.0)
    , dy_var(0.0)
    , dx(0.0)
    , dy(0.0)
    , vx_var(0.0)
    , vy_var(0.0)
    , classification(0)
    , sizeX(0.0)
    , sizeY(0.0)
    , blinker_info(0)  {
    }
  veh_object_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , dx_var(0.0)
    , dy_var(0.0)
    , dx(0.0)
    , dy(0.0)
    , vx_var(0.0)
    , vy_var(0.0)
    , classification(0)
    , sizeX(0.0)
    , sizeY(0.0)
    , blinker_info(0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _dx_var_type;
  _dx_var_type dx_var;

   typedef float _dy_var_type;
  _dy_var_type dy_var;

   typedef float _dx_type;
  _dx_type dx;

   typedef float _dy_type;
  _dy_type dy;

   typedef float _vx_var_type;
  _vx_var_type vx_var;

   typedef float _vy_var_type;
  _vy_var_type vy_var;

   typedef uint8_t _classification_type;
  _classification_type classification;

   typedef float _sizeX_type;
  _sizeX_type sizeX;

   typedef float _sizeY_type;
  _sizeY_type sizeY;

   typedef uint8_t _blinker_info_type;
  _blinker_info_type blinker_info;





  typedef boost::shared_ptr< ::erau_fusion_msgs::veh_object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::erau_fusion_msgs::veh_object_<ContainerAllocator> const> ConstPtr;

}; // struct veh_object_

typedef ::erau_fusion_msgs::veh_object_<std::allocator<void> > veh_object;

typedef boost::shared_ptr< ::erau_fusion_msgs::veh_object > veh_objectPtr;
typedef boost::shared_ptr< ::erau_fusion_msgs::veh_object const> veh_objectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::erau_fusion_msgs::veh_object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::erau_fusion_msgs::veh_object_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace erau_fusion_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'erau_fusion_msgs': ['/home/sabrinayepez/local_talker/src/erau_fusion_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::erau_fusion_msgs::veh_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erau_fusion_msgs::veh_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erau_fusion_msgs::veh_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erau_fusion_msgs::veh_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erau_fusion_msgs::veh_object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erau_fusion_msgs::veh_object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::erau_fusion_msgs::veh_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "854e2d728659a600f851a5b56bc86a26";
  }

  static const char* value(const ::erau_fusion_msgs::veh_object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x854e2d728659a600ULL;
  static const uint64_t static_value2 = 0xf851a5b56bc86a26ULL;
};

template<class ContainerAllocator>
struct DataType< ::erau_fusion_msgs::veh_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "erau_fusion_msgs/veh_object";
  }

  static const char* value(const ::erau_fusion_msgs::veh_object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::erau_fusion_msgs::veh_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
# Coordinate frames based on center of front fascia at ground level.\n\
# +x is forward, +y is left, +z is up\n\
\n\
# Position\n\
float32 x\n\
float32 y\n\
# Position Variance\n\
float32 dx_var\n\
float32 dy_var\n\
\n\
# Relative Velocity\n\
float32 dx\n\
float32 dy\n\
# Velocity Variance\n\
float32 vx_var\n\
float32 vy_var\n\
\n\
# Classification\n\
# 0 for Unknown\n\
# 1 for car\n\
# 2 for truck\n\
# 3 for pedestrian\n\
uint8 classification\n\
\n\
#Car Size\n\
float32 sizeX\n\
float32 sizeY\n\
\n\
#Blinker info (from ObstacleData.msg)\n\
# BLINKER_INFO_UNAVAILABLE = 0\n\
# BLINKER_INFO_OFF = 1\n\
# BLINKER_INFO_LEFT = 2\n\
# BLINKER_INFO_RIGHT = 3\n\
# BLINKER_INFO_BOTH = 4\n\
uint8 blinker_info\n\
";
  }

  static const char* value(const ::erau_fusion_msgs::veh_object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::erau_fusion_msgs::veh_object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.dx_var);
      stream.next(m.dy_var);
      stream.next(m.dx);
      stream.next(m.dy);
      stream.next(m.vx_var);
      stream.next(m.vy_var);
      stream.next(m.classification);
      stream.next(m.sizeX);
      stream.next(m.sizeY);
      stream.next(m.blinker_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct veh_object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::erau_fusion_msgs::veh_object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::erau_fusion_msgs::veh_object_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "dx_var: ";
    Printer<float>::stream(s, indent + "  ", v.dx_var);
    s << indent << "dy_var: ";
    Printer<float>::stream(s, indent + "  ", v.dy_var);
    s << indent << "dx: ";
    Printer<float>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<float>::stream(s, indent + "  ", v.dy);
    s << indent << "vx_var: ";
    Printer<float>::stream(s, indent + "  ", v.vx_var);
    s << indent << "vy_var: ";
    Printer<float>::stream(s, indent + "  ", v.vy_var);
    s << indent << "classification: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.classification);
    s << indent << "sizeX: ";
    Printer<float>::stream(s, indent + "  ", v.sizeX);
    s << indent << "sizeY: ";
    Printer<float>::stream(s, indent + "  ", v.sizeY);
    s << indent << "blinker_info: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blinker_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERAU_FUSION_MSGS_MESSAGE_VEH_OBJECT_H
