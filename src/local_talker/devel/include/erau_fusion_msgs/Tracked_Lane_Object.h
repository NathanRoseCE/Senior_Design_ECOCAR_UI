// Generated by gencpp from file erau_fusion_msgs/Tracked_Lane_Object.msg
// DO NOT EDIT!


#ifndef ERAU_FUSION_MSGS_MESSAGE_TRACKED_LANE_OBJECT_H
#define ERAU_FUSION_MSGS_MESSAGE_TRACKED_LANE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <erau_fusion_msgs/Tracked_Lane.h>

namespace erau_fusion_msgs
{
template <class ContainerAllocator>
struct Tracked_Lane_Object_
{
  typedef Tracked_Lane_Object_<ContainerAllocator> Type;

  Tracked_Lane_Object_()
    : header()
    , objects()  {
    }
  Tracked_Lane_Object_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , objects()  {
  (void)_alloc;
      objects.assign( ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> , 32>  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> const> ConstPtr;

}; // struct Tracked_Lane_Object_

typedef ::erau_fusion_msgs::Tracked_Lane_Object_<std::allocator<void> > Tracked_Lane_Object;

typedef boost::shared_ptr< ::erau_fusion_msgs::Tracked_Lane_Object > Tracked_Lane_ObjectPtr;
typedef boost::shared_ptr< ::erau_fusion_msgs::Tracked_Lane_Object const> Tracked_Lane_ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace erau_fusion_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'erau_fusion_msgs': ['/home/sabrinayepez/local_talker/src/erau_fusion_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a320a79d93ffd064ef7141dc8e5a6c89";
  }

  static const char* value(const ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa320a79d93ffd064ULL;
  static const uint64_t static_value2 = 0xef7141dc8e5a6c89ULL;
};

template<class ContainerAllocator>
struct DataType< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "erau_fusion_msgs/Tracked_Lane_Object";
  }

  static const char* value(const ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
erau_fusion_msgs/Tracked_Lane[32] objects\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: erau_fusion_msgs/Tracked_Lane\n\
#Lane info from LkaLane msg\n\
# LANE_TYPE_DASHED = 0\n\
# LANE_TYPE_SOLID = 1\n\
# LANE_TYPE_NONE = 2\n\
# LANE_TYPE_ROAD_EDGE = 3\n\
# LANE_TYPE_DOUBLE_LANE_MARK = 4\n\
# LANE_TYPE_BOTTS_DOTS = 5\n\
# LANE_TYPE_INVALID = 6\n\
uint8 lane_type_Left\n\
uint8 lane_type_Right\n\
uint8 lanePosition # (0 unknown, 1 left, 2 right)\n\
uint8 laneWidth #Used for scaling cars\n\
\n\
float64 position_parameter\n\
";
  }

  static const char* value(const ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tracked_Lane_Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::erau_fusion_msgs::Tracked_Lane_Object_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERAU_FUSION_MSGS_MESSAGE_TRACKED_LANE_OBJECT_H
