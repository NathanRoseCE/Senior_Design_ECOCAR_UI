// Generated by gencpp from file erau_fusion_msgs/tracked_vehicles.msg
// DO NOT EDIT!


#ifndef ERAU_FUSION_MSGS_MESSAGE_TRACKED_VEHICLES_H
#define ERAU_FUSION_MSGS_MESSAGE_TRACKED_VEHICLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <erau_fusion_msgs/tracked_veh_object.h>

namespace erau_fusion_msgs
{
template <class ContainerAllocator>
struct tracked_vehicles_
{
  typedef tracked_vehicles_<ContainerAllocator> Type;

  tracked_vehicles_()
    : header()
    , objects()  {
    }
  tracked_vehicles_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , objects()  {
  (void)_alloc;
      objects.assign( ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> , 32>  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> const> ConstPtr;

}; // struct tracked_vehicles_

typedef ::erau_fusion_msgs::tracked_vehicles_<std::allocator<void> > tracked_vehicles;

typedef boost::shared_ptr< ::erau_fusion_msgs::tracked_vehicles > tracked_vehiclesPtr;
typedef boost::shared_ptr< ::erau_fusion_msgs::tracked_vehicles const> tracked_vehiclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace erau_fusion_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'erau_fusion_msgs': ['/home/sabrinayepez/local_talker/src/erau_fusion_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd7f5ff80dc1711c347504ad53ab7290";
  }

  static const char* value(const ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd7f5ff80dc1711cULL;
  static const uint64_t static_value2 = 0x347504ad53ab7290ULL;
};

template<class ContainerAllocator>
struct DataType< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "erau_fusion_msgs/tracked_vehicles";
  }

  static const char* value(const ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
erau_fusion_msgs/tracked_veh_object[32] objects\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: erau_fusion_msgs/tracked_veh_object\n\
erau_fusion_msgs/veh_object object\n\
\n\
uint8 id # unique identifier to this object; should remain constant for this object over time\n\
uint16 object_age  # total time this vehicle has been tracked for (in seconds)\n\
\n\
# Lane assignment\n\
# 0 - Unknown\n\
# 1 - Left\n\
# 2 - Host/center\n\
# 3 - Right\n\
uint8 lane\n\
\n\
# TODO add tracks\n\
\n\
================================================================================\n\
MSG: erau_fusion_msgs/veh_object\n\
\n\
# Coordinate frames based on center of front fascia at ground level.\n\
# +x is forward, +y is left, +z is up\n\
\n\
# Position\n\
float32 x\n\
float32 y\n\
# Position Variance\n\
float32 dx_var\n\
float32 dy_var\n\
\n\
# Relative Velocity\n\
float32 dx\n\
float32 dy\n\
# Velocity Variance\n\
float32 vx_var\n\
float32 vy_var\n\
\n\
# Classification\n\
# 0 for Unknown\n\
# 1 for car\n\
# 2 for truck\n\
# 3 for pedestrian\n\
uint8 classification\n\
\n\
#Car Size\n\
float32 sizeX\n\
float32 sizeY\n\
\n\
#Blinker info (from ObstacleData.msg)\n\
# BLINKER_INFO_UNAVAILABLE = 0\n\
# BLINKER_INFO_OFF = 1\n\
# BLINKER_INFO_LEFT = 2\n\
# BLINKER_INFO_RIGHT = 3\n\
# BLINKER_INFO_BOTH = 4\n\
uint8 blinker_info\n\
";
  }

  static const char* value(const ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tracked_vehicles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::erau_fusion_msgs::tracked_vehicles_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERAU_FUSION_MSGS_MESSAGE_TRACKED_VEHICLES_H
