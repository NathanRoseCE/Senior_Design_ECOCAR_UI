// Generated by gencpp from file erau_fusion_msgs/tracked_veh_object.msg
// DO NOT EDIT!


#ifndef ERAU_FUSION_MSGS_MESSAGE_TRACKED_VEH_OBJECT_H
#define ERAU_FUSION_MSGS_MESSAGE_TRACKED_VEH_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <erau_fusion_msgs/veh_object.h>

namespace erau_fusion_msgs
{
template <class ContainerAllocator>
struct tracked_veh_object_
{
  typedef tracked_veh_object_<ContainerAllocator> Type;

  tracked_veh_object_()
    : object()
    , id(0)
    , object_age(0)
    , lane(0)  {
    }
  tracked_veh_object_(const ContainerAllocator& _alloc)
    : object(_alloc)
    , id(0)
    , object_age(0)
    , lane(0)  {
  (void)_alloc;
    }



   typedef  ::erau_fusion_msgs::veh_object_<ContainerAllocator>  _object_type;
  _object_type object;

   typedef uint8_t _id_type;
  _id_type id;

   typedef uint16_t _object_age_type;
  _object_age_type object_age;

   typedef uint8_t _lane_type;
  _lane_type lane;





  typedef boost::shared_ptr< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> const> ConstPtr;

}; // struct tracked_veh_object_

typedef ::erau_fusion_msgs::tracked_veh_object_<std::allocator<void> > tracked_veh_object;

typedef boost::shared_ptr< ::erau_fusion_msgs::tracked_veh_object > tracked_veh_objectPtr;
typedef boost::shared_ptr< ::erau_fusion_msgs::tracked_veh_object const> tracked_veh_objectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace erau_fusion_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'erau_fusion_msgs': ['/home/sabrinayepez/local_talker/src/erau_fusion_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0eaf4f33ea0e60aee406a700d7cb793e";
  }

  static const char* value(const ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0eaf4f33ea0e60aeULL;
  static const uint64_t static_value2 = 0xe406a700d7cb793eULL;
};

template<class ContainerAllocator>
struct DataType< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "erau_fusion_msgs/tracked_veh_object";
  }

  static const char* value(const ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "erau_fusion_msgs/veh_object object\n\
\n\
uint8 id # unique identifier to this object; should remain constant for this object over time\n\
uint16 object_age  # total time this vehicle has been tracked for (in seconds)\n\
\n\
# Lane assignment\n\
# 0 - Unknown\n\
# 1 - Left\n\
# 2 - Host/center\n\
# 3 - Right\n\
uint8 lane\n\
\n\
# TODO add tracks\n\
\n\
================================================================================\n\
MSG: erau_fusion_msgs/veh_object\n\
\n\
# Coordinate frames based on center of front fascia at ground level.\n\
# +x is forward, +y is left, +z is up\n\
\n\
# Position\n\
float32 x\n\
float32 y\n\
# Position Variance\n\
float32 dx_var\n\
float32 dy_var\n\
\n\
# Relative Velocity\n\
float32 dx\n\
float32 dy\n\
# Velocity Variance\n\
float32 vx_var\n\
float32 vy_var\n\
\n\
# Classification\n\
# 0 for Unknown\n\
# 1 for car\n\
# 2 for truck\n\
# 3 for pedestrian\n\
uint8 classification\n\
\n\
#Car Size\n\
float32 sizeX\n\
float32 sizeY\n\
\n\
#Blinker info (from ObstacleData.msg)\n\
# BLINKER_INFO_UNAVAILABLE = 0\n\
# BLINKER_INFO_OFF = 1\n\
# BLINKER_INFO_LEFT = 2\n\
# BLINKER_INFO_RIGHT = 3\n\
# BLINKER_INFO_BOTH = 4\n\
uint8 blinker_info\n\
";
  }

  static const char* value(const ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object);
      stream.next(m.id);
      stream.next(m.object_age);
      stream.next(m.lane);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tracked_veh_object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::erau_fusion_msgs::tracked_veh_object_<ContainerAllocator>& v)
  {
    s << indent << "object: ";
    s << std::endl;
    Printer< ::erau_fusion_msgs::veh_object_<ContainerAllocator> >::stream(s, indent + "  ", v.object);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "object_age: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.object_age);
    s << indent << "lane: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lane);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERAU_FUSION_MSGS_MESSAGE_TRACKED_VEH_OBJECT_H
