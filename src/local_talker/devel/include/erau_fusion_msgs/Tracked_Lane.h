// Generated by gencpp from file erau_fusion_msgs/Tracked_Lane.msg
// DO NOT EDIT!


#ifndef ERAU_FUSION_MSGS_MESSAGE_TRACKED_LANE_H
#define ERAU_FUSION_MSGS_MESSAGE_TRACKED_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace erau_fusion_msgs
{
template <class ContainerAllocator>
struct Tracked_Lane_
{
  typedef Tracked_Lane_<ContainerAllocator> Type;

  Tracked_Lane_()
    : lane_type_Left(0)
    , lane_type_Right(0)
    , lanePosition(0)
    , laneWidth(0)
    , position_parameter(0.0)  {
    }
  Tracked_Lane_(const ContainerAllocator& _alloc)
    : lane_type_Left(0)
    , lane_type_Right(0)
    , lanePosition(0)
    , laneWidth(0)
    , position_parameter(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _lane_type_Left_type;
  _lane_type_Left_type lane_type_Left;

   typedef uint8_t _lane_type_Right_type;
  _lane_type_Right_type lane_type_Right;

   typedef uint8_t _lanePosition_type;
  _lanePosition_type lanePosition;

   typedef uint8_t _laneWidth_type;
  _laneWidth_type laneWidth;

   typedef double _position_parameter_type;
  _position_parameter_type position_parameter;





  typedef boost::shared_ptr< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Tracked_Lane_

typedef ::erau_fusion_msgs::Tracked_Lane_<std::allocator<void> > Tracked_Lane;

typedef boost::shared_ptr< ::erau_fusion_msgs::Tracked_Lane > Tracked_LanePtr;
typedef boost::shared_ptr< ::erau_fusion_msgs::Tracked_Lane const> Tracked_LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace erau_fusion_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'erau_fusion_msgs': ['/home/sabrinayepez/local_talker/src/erau_fusion_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14f981197f8d751c83fad6e1038cf6df";
  }

  static const char* value(const ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14f981197f8d751cULL;
  static const uint64_t static_value2 = 0x83fad6e1038cf6dfULL;
};

template<class ContainerAllocator>
struct DataType< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "erau_fusion_msgs/Tracked_Lane";
  }

  static const char* value(const ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Lane info from LkaLane msg\n\
# LANE_TYPE_DASHED = 0\n\
# LANE_TYPE_SOLID = 1\n\
# LANE_TYPE_NONE = 2\n\
# LANE_TYPE_ROAD_EDGE = 3\n\
# LANE_TYPE_DOUBLE_LANE_MARK = 4\n\
# LANE_TYPE_BOTTS_DOTS = 5\n\
# LANE_TYPE_INVALID = 6\n\
uint8 lane_type_Left\n\
uint8 lane_type_Right\n\
uint8 lanePosition # (0 unknown, 1 left, 2 right)\n\
uint8 laneWidth #Used for scaling cars\n\
\n\
float64 position_parameter\n\
";
  }

  static const char* value(const ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_type_Left);
      stream.next(m.lane_type_Right);
      stream.next(m.lanePosition);
      stream.next(m.laneWidth);
      stream.next(m.position_parameter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tracked_Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::erau_fusion_msgs::Tracked_Lane_<ContainerAllocator>& v)
  {
    s << indent << "lane_type_Left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lane_type_Left);
    s << indent << "lane_type_Right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lane_type_Right);
    s << indent << "lanePosition: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lanePosition);
    s << indent << "laneWidth: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.laneWidth);
    s << indent << "position_parameter: ";
    Printer<double>::stream(s, indent + "  ", v.position_parameter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERAU_FUSION_MSGS_MESSAGE_TRACKED_LANE_H
